/*
Invoice Ninja API Reference.

Testing PurchaseOrdersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_PurchaseOrdersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PurchaseOrdersAPIService ActionPurchaseOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var action string

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.ActionPurchaseOrder(context.Background(), id, action).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService BulkPurchaseOrderss", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PurchaseOrdersAPI.BulkPurchaseOrderss(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService DeletePurchaseOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.PurchaseOrdersAPI.DeletePurchaseOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService DownloadPurchaseOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invitationKey string

		httpRes, err := apiClient.PurchaseOrdersAPI.DownloadPurchaseOrder(context.Background(), invitationKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService EditPurchaseOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.EditPurchaseOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService GetPurchaseOrderCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.GetPurchaseOrderCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService GetPurchaseOrders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.GetPurchaseOrders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService ShowPurchaseOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.ShowPurchaseOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService StorePurchaseOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.StorePurchaseOrder(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService UpdatePurchaseOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.UpdatePurchaseOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService UploadPurchaseOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.UploadPurchaseOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
